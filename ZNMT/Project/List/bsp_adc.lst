C51 COMPILER V9.50a   BSP_ADC                                                              09/24/2013 14:00:43 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE BSP_ADC
OBJECT MODULE PLACED IN .\Obj\bsp_adc.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE ..\Bsp\bsp_adc.c LARGE OPTIMIZE(SIZE) BROWSE MODP2 INCDIR(..\
                    -App;..\Bsp) DEBUG OBJECTEXTEND PRINT(.\List\bsp_adc.lst) OBJECT(.\Obj\bsp_adc.obj)

line level    source

   1          /*
   2          * ADC采样
   3          */
   4          #include <stc12c5a60s2.h>
   5          #include <intrins.h>
   6          
   7          //10K  温度传感器表
   8          //温度-电阻值转换表,下标表示温度,下标0对应-40度,1对应-39度...,阻值单位为欧
   9          //如果阻值大于R_T_Table[0]则温度小-40度，阻值大于R_T_Table[1]则温度小于-39度...
  10          code const long R_T_Table[221] =
  11              {
  12                  335811, 314029, 293803, 275015, 257552,     //-40~-36
  13                  241313, 226204, 212141, 199044, 186841,     //-35~-31
  14                  175465, 164856, 154957, 145716, 137086,     //-30~-26
  15                  129022, 121485, 114435, 107840, 101667,     //-25~-21
  16                  95886,  90471,  85395,  80636,  76173,      //-20~-16
  17                  71984,  68052,  64359,  60889,  57628,      //-15~-11
  18                  54562,  51677,  48963,  46408,  44002,      //-10~-6
  19                  41735,  39599,  37586,  35686,  33894,      //-5~--1
  20                  32203,  30607,  29099,  27674,  26328,      //0~4
  21                  25055,  23851,  22712,  21634,  20614,      //5~9
  22                  19650,  18733,  17865,  17043,  16264,      //10~14
  23                  15524,  14823,  14157,  13525,  12925,      //15~19
  24                  12354,  11813,  11298,  10808,  10342,      //20-24
  25                  9900,   9470,   9061,   8672,   8302,       //25-29
  26                  7950,   7615,   7295,   6991,   6702,       //30-34
  27                  6425,   6162,   5911,   5672,   5443,       //35-39
  28                  5225,   5017,   4818,   4628,   4447,       //40-44
  29                  4274,   4108,   3950,   3799,   3654,       //45-49
  30                  3515,   3383,   3256,   3135,   3019,       //50-54
  31                  2907,   2801,   2699,   2601,   2507,       //55-59
  32                  2417,   2330,   2248,   2168,   2092,       //60-64
  33                  2019,   1949,   1881,   1817,   1754,       //65-69
  34                  1695,   1637,   1582,   1529,   1478,       //70-74
  35                  1429,   1382,   1336,   1293,   1251,       //75-79
  36                  1210,   1171,   1134,   1098,   1063,       //80-84
  37                  1029,   997,    966,    936,    907,        //85-89
  38                  879,    852,    826,    801,    777,        //90-94
  39                  753,    731,    709,    688,    668,        //95-99
  40                  648,    629,    611,    593,    576,        //100-104
  41                  560,    544,    529,    514,    499,        //105-109
  42                  485,    472,    459,    446,    434,        //110-114
  43                  422,    410,    399,    389,    378,        //115-119
  44                  368,    358,    349,    340,    331,        //120-124
  45                  322,    314,    306,    298,    290,        //125-129
  46                  283,    275,    269,    262,    255,        //130-134
  47                  249,    243,    237,    231,    225,        //135-139
  48                  220,    214,    209,    204,    199,        //140-144
  49                  194,    190,    185,    181,    177,        //145-149
  50                  173,    168,    165,    161,    157,        //150-154
  51                  153,    150,    147,    143,    140,        //155-159
  52                  137,    134,    131,    128,    125,        //160-164
  53                  122,    120,    117,    115,    112,        //165-169
  54                  110,    107,    105,    103,    101,        //170-174
C51 COMPILER V9.50a   BSP_ADC                                                              09/24/2013 14:00:43 PAGE 2   

  55                  98,     96,     94,     92,     90,         //175-179,
  56                  89,                                         //180
  57              };    
  58          
  59          
  60          /*********************************************************************************************
  61          函数名：adcGet
  62          作  用: 获得ADC转换值
  63          参  数：转换通道
  64          返回值：16bit 温度值
  65          **********************************************************************************************/
  66          static unsigned int adcGet(unsigned char channel)
  67          {
  68   1              ADC_CONTR = 0x88|channel;    //开启AD转换1000 1000 即POWER SPEED1 SPEED0 ADC_FLAG   ADC_START CHS2 CHS1 C
             -HS0 
  69   1      
  70   1              //要经过4个CPU时钟的延时，其值才能够保证被设置进ADC_CONTR 寄存器
  71   1              _nop_();
  72   1              _nop_(); 
  73   1              _nop_(); 
  74   1              _nop_();
  75   1      
  76   1              //等待转换完成
  77   1              while(!(ADC_CONTR&0x10))    
  78   1              {
  79   2              }
  80   1              
  81   1              ADC_CONTR &= 0xe7;      //关闭AD转换，ADC_FLAG位由软件清0
  82   1              
  83   1              return (ADC_RES*4+ADC_RESL);   //返回AD转换完成的10位数据(16进制)
  84   1      }
  85          
  86          /*********************************************************************************************
  87          函数名：adcWork
  88          作  用: 转换结果求平均
  89          参  数：转换通道
  90          返回值：转换结果
  91          **********************************************************************************************/
  92          float adcWork(unsigned char channel)
  93          {
  94   1              float AD_val;     //定义处理后的数值AD_val为浮点数
  95   1              unsigned char i;
  96   1              
  97   1              for(i=0;i<100;i++) 
  98   1              {
  99   2                      //转换100次求平均值(提高精度)
 100   2                      AD_val+=adcGet(channel); 
 101   2              }
 102   1              
 103   1              AD_val/=100;
 104   1              AD_val=(AD_val*5)/1024; //AD的参考电压是单片机上的5v，所以乘5即为实际电压值
 105   1              
 106   1              return AD_val;
 107   1      }
 108          
 109          /*********************************************************************************************
 110          函数名：adcWork
 111          作  用: 转换结果求平均
 112          参  数：转换通道
 113          返回值：转换结果
 114          **********************************************************************************************/
 115          extern void delayMS(unsigned int tim);
C51 COMPILER V9.50a   BSP_ADC                                                              09/24/2013 14:00:43 PAGE 3   

 116          void adcInit(void)
 117          {
 118   1              P1ASF=0x43; //  0100 0011  P1.6  P1.1 P1.0作为AD
 119   1              
 120   1              ADC_RES=0;   //清零转换结果寄存器高8位
 121   1              ADC_RESL=0; //清零转换结果寄存器低2位
 122   1              ADC_CONTR=0x80;//开启AD电源
 123   1              
 124   1              delayMS(2);   //等待1ms，让AD电源稳定
 125   1      }
 126          
 127          
 128          /*********************************************************************************************
 129          函数名：tempCalculate
 130          作  用: 温度计算
 131          参  数：转换通道
 132          返回值：转换结果
 133          **********************************************************************************************/
 134          int tempCalculate(unsigned char channel)
 135          {
 136   1              float tmp;
 137   1              long res; // 阻值
 138   1              int left = 0, middle, right = sizeof(R_T_Table)/sizeof(R_T_Table[0]); 
 139   1      
 140   1              tmp = adcWork(channel);
 141   1      
 142   1              if((unsigned char)tmp == 5)
 143   1              {
 144   2                      tmp = 5.0;
 145   2              }
 146   1      
 147   1              //有adc采集的电压计算电阻值
 148   1              res = (long)((tmp*10000) /(5 - tmp));
 149   1      
 150   1              //二分查找
 151   1              middle = (left + right)/2;
 152   1              while(left < right)
 153   1              {
 154   2                      if(res == R_T_Table[middle])
 155   2                      {
 156   3                              break;
 157   3                      }
 158   2                      else if(res < R_T_Table[middle])
 159   2                      {
 160   3                              left = middle + 1;
 161   3                      }
 162   2                      else
 163   2                      {
 164   3                              right = middle;
 165   3                      }
 166   2      
 167   2                      middle = (left + right) / 2;
 168   2              }
 169   1      
 170   1              return (middle - 40);
 171   1              
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    492    ----
   CONSTANT SIZE    =    884    ----
C51 COMPILER V9.50a   BSP_ADC                                                              09/24/2013 14:00:43 PAGE 4   

   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
